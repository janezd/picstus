/* -*- buffer-read-only:t -*-
   This file is automatically generated. Do not edit! */
#ifndef SP_RESNAME
#define SP_RESNAME python
#endif /* SP_RESNAME */
#if !SPDLL
#ifndef SP_STATIC_FOREIGN_RESOURCE
/* 3.9 If not SPDLL then this is a static foreign resource */
#define SP_STATIC_FOREIGN_RESOURCE 1
#endif /* SP_STATIC_FOREIGN_RESOURCE */
#endif /* !SPDLL */

#include <sicstus/sicstus.h>
#include <stdlib.h>

#if ((SP_DYNAMIC_FOREIGN_RESOURCE || SPDLL) && !MULTI_SP_AWARE)
#ifndef sp_GlobalSICStus
#define sp_GlobalSICStus SP_RESNAME_CATENATE(sp_GlobalSICStus,SP_RESNAME)
#endif /* sp_GlobalSICStus */
extern SICSTUS_API_STRUCT_TYPE *sp_GlobalSICStus; /* name mangled */
#endif /* ((SP_DYNAMIC_FOREIGN_RESOURCE || SPDLL) && !MULTI_SP_AWARE) */

#ifdef __cplusplus
extern "C" {
#endif

/* 3.9 Mangle the name for link-time checking of MULTI_SP_AWARE-ness etc */
#ifdef SP_MANGLE
#define init SP_MANGLE(init)
#endif /* SP_MANGLE */
extern void SPCDECL init PROTOTYPE((SPAPI_ARG_PROTO_DECL int));
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

#ifdef SP_MANGLE
#define deinit SP_MANGLE(deinit)
#endif /* SP_MANGLE */
extern void SPCDECL deinit PROTOTYPE((SPAPI_ARG_PROTO_DECL int));
#ifdef __cplusplus
}
#endif

#ifndef SP_CONTEXT_SWITCH_HOOK
#define SP_CONTEXT_SWITCH_HOOK sp_context_switch_hook_python
#endif

#ifdef __cplusplus
extern "C" {
#endif
/* Used when SP_SINGLE_THREADED is true. You have to define it in your
   foreign code.  Will be called with 1 when any procedure in the
   foreign resource is called by a SICStus run-time. Will be called
   with 0 right before returning to the SICStus run-time. It is
   allowed to call the SICStus API. This hook can be used to switch
   the global state (using SP_foreign_stash()).
*/
extern void SPCDECL SP_CONTEXT_SWITCH_HOOK (int);
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
/* 3.9 Mangle the name for link-time checking of MULTI_SP_AWARE-ness etc */
#ifdef SP_MANGLE
#define python_exec SP_MANGLE(python_exec)
#endif /* SP_MANGLE */
extern void SPCDECL python_exec PROTOTYPE((
    SPAPI_ARG_PROTO_DECL
    SP_term_ref));
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
/* 3.9 Mangle the name for link-time checking of MULTI_SP_AWARE-ness etc */
#ifdef SP_MANGLE
#define python_set SP_MANGLE(python_set)
#endif /* SP_MANGLE */
extern void SPCDECL python_set PROTOTYPE((
    SPAPI_ARG_PROTO_DECL
    SP_term_ref,
    SP_term_ref));
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
/* 3.9 Mangle the name for link-time checking of MULTI_SP_AWARE-ness etc */
#ifdef SP_MANGLE
#define python_eval SP_MANGLE(python_eval)
#endif /* SP_MANGLE */
extern void SPCDECL python_eval PROTOTYPE((
    SPAPI_ARG_PROTO_DECL
    SP_term_ref,
    SP_term_ref));
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
/* 3.9 Mangle the name for link-time checking of MULTI_SP_AWARE-ness etc */
#ifdef SP_MANGLE
#define python_call SP_MANGLE(python_call)
#endif /* SP_MANGLE */
extern void SPCDECL python_call PROTOTYPE((
    SPAPI_ARG_PROTO_DECL
    SP_term_ref,
    SP_term_ref,
    SP_term_ref));
#ifdef __cplusplus
}
#endif
